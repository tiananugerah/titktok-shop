/**
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusInfoResponse } from '../model/affiliatePartner/V202501/GetAffiliateCampaignCreatorFulfillmentStatusInfoResponse';
import { AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusListResponse } from '../model/affiliatePartner/V202501/GetAffiliateCampaignCreatorFulfillmentStatusListResponse';
import { AffiliatePartner202501GetAffiliateCampaignCreatorProductContentStatisticsResponse } from '../model/affiliatePartner/V202501/GetAffiliateCampaignCreatorProductContentStatisticsResponse';
import { AffiliatePartner202501GetAffiliateCampaignCreatorProductSampleStatusResponse } from '../model/affiliatePartner/V202501/GetAffiliateCampaignCreatorProductSampleStatusResponse';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://open-api.tiktokglobalshop.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AffiliatePartnerV202501ApiApiKeys {
}

export class AffiliatePartnerV202501Api {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    static readonly apiName = 'AffiliatePartnerV202501Api' as const;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: AffiliatePartnerV202501ApiApiKeys, value: string) {
        (this.authentications as any)[AffiliatePartnerV202501ApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * This API offers the ability to get the product of the campaign fulfillment status for creators who added partner campaign products to their showcase. For details of a specified product involved in an affiliated campaign, use Get Affiliate Campaign Creator Fulfillment Status Info gateway.
     * @summary GetAffiliateCampaignCreatorFulfillmentStatusList
     * @param campaignId the unique id of a campaign
     * @param xTtsAccessToken 
     * @param contentType Allowed type: application/json
     * @param pageSize The number of results to be returned per page. Valid range: 1-50.
     * @param pageToken An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page.
     */
    public async CampaignsCampaignIdProductsPerformanceGet (campaignId: string, xTtsAccessToken: string, contentType: string, pageSize?: number, pageToken?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusListResponse;  }> {
        const localVarPath = this.basePath + '/affiliate_partner/202501/campaigns/{campaign_id}/products/performance'
            .replace('{' + 'campaign_id' + '}', encodeURIComponent(String(campaignId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling CampaignsCampaignIdProductsPerformanceGet.');
        }

        // verify required parameter 'xTtsAccessToken' is not null or undefined
        if (xTtsAccessToken === null || xTtsAccessToken === undefined) {
            throw new Error('Required parameter xTtsAccessToken was null or undefined when calling CampaignsCampaignIdProductsPerformanceGet.');
        }

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling CampaignsCampaignIdProductsPerformanceGet.');
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['page_size'] = ObjectSerializer.serialize(pageSize, "number");
        }

        if (pageToken !== undefined) {
            localVarQueryParameters['page_token'] = ObjectSerializer.serialize(pageToken, "string");
        }

        localVarHeaderParams['x-tts-access-token'] = ObjectSerializer.serialize(xTtsAccessToken, "string");
        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusListResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusListResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get statistics on creator\'s marketing video content 
     * @summary GetAffiliateCampaignCreatorProductContentStatistics
     * @param campaignId The campaign identifier.
     * @param productId The product identifier.
     * @param creatorTempId A time-limited identifier associated with the creator that is valid for one hour. This identifier is valid to retrieve content performance data associated with the creator. Refer to &#x60;promotion_creators.creator.creator_temp_id&#x60; in the response of Get Affiliate Campaign Creator Fulfillment Status Info gateway.
     * @param affiliateProductId The affiliate product identifier to be included in the response. Refer to &#x60;promotion_creators.affiliate_product_id&#x60; in the response of Get Affiliate Campaign Creator Fulfillment Status Info gateway.
     * @param xTtsAccessToken 
     * @param contentType2 Allowed type: application/json
     * @param contentType Content type.Identify content as video or live. - 1: VIDEO - 2: LIVE_ROOM
     */
    public async CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGet (campaignId: string, productId: string, creatorTempId: string, affiliateProductId: string, xTtsAccessToken: string, contentType2: string, contentType?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AffiliatePartner202501GetAffiliateCampaignCreatorProductContentStatisticsResponse;  }> {
        const localVarPath = this.basePath + '/affiliate_partner/202501/campaigns/{campaign_id}/products/{product_id}/creator/{creator_temp_id}/content/statistics'
            .replace('{' + 'campaign_id' + '}', encodeURIComponent(String(campaignId)))
            .replace('{' + 'product_id' + '}', encodeURIComponent(String(productId)))
            .replace('{' + 'creator_temp_id' + '}', encodeURIComponent(String(creatorTempId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGet.');
        }

        // verify required parameter 'productId' is not null or undefined
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGet.');
        }

        // verify required parameter 'creatorTempId' is not null or undefined
        if (creatorTempId === null || creatorTempId === undefined) {
            throw new Error('Required parameter creatorTempId was null or undefined when calling CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGet.');
        }

        // verify required parameter 'affiliateProductId' is not null or undefined
        if (affiliateProductId === null || affiliateProductId === undefined) {
            throw new Error('Required parameter affiliateProductId was null or undefined when calling CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGet.');
        }

        // verify required parameter 'xTtsAccessToken' is not null or undefined
        if (xTtsAccessToken === null || xTtsAccessToken === undefined) {
            throw new Error('Required parameter xTtsAccessToken was null or undefined when calling CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGet.');
        }

        // verify required parameter 'contentType2' is not null or undefined
        if (contentType2 === null || contentType2 === undefined) {
            throw new Error('Required parameter contentType2 was null or undefined when calling CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGet.');
        }

        if (affiliateProductId !== undefined) {
            localVarQueryParameters['affiliate_product_id'] = ObjectSerializer.serialize(affiliateProductId, "string");
        }

        if (contentType !== undefined) {
            localVarQueryParameters['content_type'] = ObjectSerializer.serialize(contentType, "string");
        }

        localVarHeaderParams['x-tts-access-token'] = ObjectSerializer.serialize(xTtsAccessToken, "string");
        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType2, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AffiliatePartner202501GetAffiliateCampaignCreatorProductContentStatisticsResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AffiliatePartner202501GetAffiliateCampaignCreatorProductContentStatisticsResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get progress on creator\'s sample status
     * @summary GetAffiliateCampaignCreatorProductSampleStatus
     * @param campaignId The campaign identifier.
     * @param productId The product identifier.
     * @param creatorTempId A time-limited identifier associated with the creator that is valid for one hour. This identifier is valid to retrieve content performance data associated with the creator.&#x60;promotion_creators.creator.creator_temp_id&#x60; in the response of Get Affiliate Campaign Creator Fulfillment Status Info gateway.
     * @param xTtsAccessToken 
     * @param contentType Allowed type: application/json
     */
    public async CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGet (campaignId: string, productId: string, creatorTempId: string, xTtsAccessToken: string, contentType: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AffiliatePartner202501GetAffiliateCampaignCreatorProductSampleStatusResponse;  }> {
        const localVarPath = this.basePath + '/affiliate_partner/202501/campaigns/{campaign_id}/products/{product_id}/creator/{creator_temp_id}/content/statistics/sample/status'
            .replace('{' + 'campaign_id' + '}', encodeURIComponent(String(campaignId)))
            .replace('{' + 'product_id' + '}', encodeURIComponent(String(productId)))
            .replace('{' + 'creator_temp_id' + '}', encodeURIComponent(String(creatorTempId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGet.');
        }

        // verify required parameter 'productId' is not null or undefined
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGet.');
        }

        // verify required parameter 'creatorTempId' is not null or undefined
        if (creatorTempId === null || creatorTempId === undefined) {
            throw new Error('Required parameter creatorTempId was null or undefined when calling CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGet.');
        }

        // verify required parameter 'xTtsAccessToken' is not null or undefined
        if (xTtsAccessToken === null || xTtsAccessToken === undefined) {
            throw new Error('Required parameter xTtsAccessToken was null or undefined when calling CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGet.');
        }

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGet.');
        }

        localVarHeaderParams['x-tts-access-token'] = ObjectSerializer.serialize(xTtsAccessToken, "string");
        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AffiliatePartner202501GetAffiliateCampaignCreatorProductSampleStatusResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AffiliatePartner202501GetAffiliateCampaignCreatorProductSampleStatusResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This API offers the ability to get the product fulfillment status for creators who added partner campaign products to their showcase
     * @summary GetAffiliateCampaignCreatorFulfillmentStatusInfo
     * @param campaignId The campaign identifier.
     * @param productId The product identifier.
     * @param xTtsAccessToken 
     * @param contentType Allowed type: application/json
     * @param pageSize The number of results to be returned per page. Valid range: 1-50.
     * @param pageToken An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page.
     */
    public async CampaignsCampaignIdProductsProductIdPerformanceGet (campaignId: string, productId: string, xTtsAccessToken: string, contentType: string, pageSize?: number, pageToken?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusInfoResponse;  }> {
        const localVarPath = this.basePath + '/affiliate_partner/202501/campaigns/{campaign_id}/products/{product_id}/performance'
            .replace('{' + 'campaign_id' + '}', encodeURIComponent(String(campaignId)))
            .replace('{' + 'product_id' + '}', encodeURIComponent(String(productId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling CampaignsCampaignIdProductsProductIdPerformanceGet.');
        }

        // verify required parameter 'productId' is not null or undefined
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling CampaignsCampaignIdProductsProductIdPerformanceGet.');
        }

        // verify required parameter 'xTtsAccessToken' is not null or undefined
        if (xTtsAccessToken === null || xTtsAccessToken === undefined) {
            throw new Error('Required parameter xTtsAccessToken was null or undefined when calling CampaignsCampaignIdProductsProductIdPerformanceGet.');
        }

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling CampaignsCampaignIdProductsProductIdPerformanceGet.');
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['page_size'] = ObjectSerializer.serialize(pageSize, "number");
        }

        if (pageToken !== undefined) {
            localVarQueryParameters['page_token'] = ObjectSerializer.serialize(pageToken, "string");
        }

        localVarHeaderParams['x-tts-access-token'] = ObjectSerializer.serialize(xTtsAccessToken, "string");
        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusInfoResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AffiliatePartner202501GetAffiliateCampaignCreatorFulfillmentStatusInfoResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}

export const AffiliatePartnerV202501ApiOperationNames = {
    CampaignsCampaignIdProductsPerformanceGet: 'CampaignsCampaignIdProductsPerformanceGet',CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGet: 'CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGet',CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGet: 'CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGet',CampaignsCampaignIdProductsProductIdPerformanceGet: 'CampaignsCampaignIdProductsProductIdPerformanceGet',
} as const


export type AffiliatePartnerV202501ApiOperationTypes = {
    CampaignsCampaignIdProductsPerformanceGet: AffiliatePartnerV202501Api['CampaignsCampaignIdProductsPerformanceGet'];CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGet: AffiliatePartnerV202501Api['CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsGet'];CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGet: AffiliatePartnerV202501Api['CampaignsCampaignIdProductsProductIdCreatorCreatorTempIdContentStatisticsSampleStatusGet'];CampaignsCampaignIdProductsProductIdPerformanceGet: AffiliatePartnerV202501Api['CampaignsCampaignIdProductsProductIdPerformanceGet'];
};

