/**
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { AffiliateCreator202409CreatorSearchSampleApplicationFulfillmentsRequestBody } from '../model/affiliateCreator/V202409/CreatorSearchSampleApplicationFulfillmentsRequestBody';
import { AffiliateCreator202409CreatorSearchSampleApplicationFulfillmentsResponse } from '../model/affiliateCreator/V202409/CreatorSearchSampleApplicationFulfillmentsResponse';
import { AffiliateCreator202409RemoveShowcaseProductsRequestBody } from '../model/affiliateCreator/V202409/RemoveShowcaseProductsRequestBody';
import { AffiliateCreator202409RemoveShowcaseProductsResponse } from '../model/affiliateCreator/V202409/RemoveShowcaseProductsResponse';
import { AffiliateCreator202409TopShowcaseProductsRequestBody } from '../model/affiliateCreator/V202409/TopShowcaseProductsRequestBody';
import { AffiliateCreator202409TopShowcaseProductsResponse } from '../model/affiliateCreator/V202409/TopShowcaseProductsResponse';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://open-api.tiktokglobalshop.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AffiliateCreatorV202409ApiApiKeys {
}

export class AffiliateCreatorV202409Api {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    static readonly apiName = 'AffiliateCreatorV202409Api' as const;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: AffiliateCreatorV202409ApiApiKeys, value: string) {
        (this.authentications as any)[AffiliateCreatorV202409ApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * You, the creator, can use this API to query the fulfillment status for the received sample applications.
     * @summary CreatorSearchSampleApplicationFulfillments
     * @param xTtsAccessToken 
     * @param contentType Allowed type: application/json
     * @param sortOrder The sort order for the field specified in the sort_field parameter.  Default: ASC Possible values: ASC: Ascending order DESC: Descending order
     * @param sortField Some sorting fields are as follows: - expired_time: sort by left time to fulfill. - create_time: sort by fulfillment content create time. Default value  is expired_time.
     * @param CreatorSearchSampleApplicationFulfillmentsRequestBody 
     */
    public async SampleApplicationsFulfillmentsSearchPost (xTtsAccessToken: string, contentType: string, sortOrder?: string, sortField?: string, CreatorSearchSampleApplicationFulfillmentsRequestBody?: AffiliateCreator202409CreatorSearchSampleApplicationFulfillmentsRequestBody, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AffiliateCreator202409CreatorSearchSampleApplicationFulfillmentsResponse;  }> {
        const localVarPath = this.basePath + '/affiliate_creator/202409/sample_applications/fulfillments/search';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'xTtsAccessToken' is not null or undefined
        if (xTtsAccessToken === null || xTtsAccessToken === undefined) {
            throw new Error('Required parameter xTtsAccessToken was null or undefined when calling SampleApplicationsFulfillmentsSearchPost.');
        }

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling SampleApplicationsFulfillmentsSearchPost.');
        }

        if (sortOrder !== undefined) {
            localVarQueryParameters['sort_order'] = ObjectSerializer.serialize(sortOrder, "string");
        }

        if (sortField !== undefined) {
            localVarQueryParameters['sort_field'] = ObjectSerializer.serialize(sortField, "string");
        }

        localVarHeaderParams['x-tts-access-token'] = ObjectSerializer.serialize(xTtsAccessToken, "string");
        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(CreatorSearchSampleApplicationFulfillmentsRequestBody, "AffiliateCreator202409CreatorSearchSampleApplicationFulfillmentsRequestBody")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AffiliateCreator202409CreatorSearchSampleApplicationFulfillmentsResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AffiliateCreator202409CreatorSearchSampleApplicationFulfillmentsResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This API removes the products in the creator\'s showcase. The platform will return error code and error message if the deletion fails.
     * @summary RemoveShowcaseProducts
     * @param xTtsAccessToken 
     * @param contentType Allowed type: application/json
     * @param RemoveShowcaseProductsRequestBody 
     */
    public async ShowcasesProductsDelete (xTtsAccessToken: string, contentType: string, RemoveShowcaseProductsRequestBody?: AffiliateCreator202409RemoveShowcaseProductsRequestBody, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AffiliateCreator202409RemoveShowcaseProductsResponse;  }> {
        const localVarPath = this.basePath + '/affiliate_creator/202409/showcases/products';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'xTtsAccessToken' is not null or undefined
        if (xTtsAccessToken === null || xTtsAccessToken === undefined) {
            throw new Error('Required parameter xTtsAccessToken was null or undefined when calling ShowcasesProductsDelete.');
        }

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling ShowcasesProductsDelete.');
        }

        localVarHeaderParams['x-tts-access-token'] = ObjectSerializer.serialize(xTtsAccessToken, "string");
        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(RemoveShowcaseProductsRequestBody, "AffiliateCreator202409RemoveShowcaseProductsRequestBody")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AffiliateCreator202409RemoveShowcaseProductsResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AffiliateCreator202409RemoveShowcaseProductsResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use this API to move products to the top in a creator\'s showcase. The platform will return the error code and error message if the pinning operation fails.
     * @summary TopShowcaseProducts
     * @param xTtsAccessToken 
     * @param contentType Allowed type: application/json
     * @param TopShowcaseProductsRequestBody 
     */
    public async ShowcasesProductsTopPost (xTtsAccessToken: string, contentType: string, TopShowcaseProductsRequestBody?: AffiliateCreator202409TopShowcaseProductsRequestBody, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AffiliateCreator202409TopShowcaseProductsResponse;  }> {
        const localVarPath = this.basePath + '/affiliate_creator/202409/showcases/products/top';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'xTtsAccessToken' is not null or undefined
        if (xTtsAccessToken === null || xTtsAccessToken === undefined) {
            throw new Error('Required parameter xTtsAccessToken was null or undefined when calling ShowcasesProductsTopPost.');
        }

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling ShowcasesProductsTopPost.');
        }

        localVarHeaderParams['x-tts-access-token'] = ObjectSerializer.serialize(xTtsAccessToken, "string");
        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(TopShowcaseProductsRequestBody, "AffiliateCreator202409TopShowcaseProductsRequestBody")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AffiliateCreator202409TopShowcaseProductsResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AffiliateCreator202409TopShowcaseProductsResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}

export const AffiliateCreatorV202409ApiOperationNames = {
    SampleApplicationsFulfillmentsSearchPost: 'SampleApplicationsFulfillmentsSearchPost',ShowcasesProductsDelete: 'ShowcasesProductsDelete',ShowcasesProductsTopPost: 'ShowcasesProductsTopPost',
} as const


export type AffiliateCreatorV202409ApiOperationTypes = {
    SampleApplicationsFulfillmentsSearchPost: AffiliateCreatorV202409Api['SampleApplicationsFulfillmentsSearchPost'];ShowcasesProductsDelete: AffiliateCreatorV202409Api['ShowcasesProductsDelete'];ShowcasesProductsTopPost: AffiliateCreatorV202409Api['ShowcasesProductsTopPost'];
};

