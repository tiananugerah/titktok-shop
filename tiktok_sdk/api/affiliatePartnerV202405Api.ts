/**
 * tiktok shop openapi
 * sdk for apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { AffiliatePartner202405CreateAffiliatePartnerCampaignRequestBody } from '../model/affiliatePartner/V202405/CreateAffiliatePartnerCampaignRequestBody';
import { AffiliatePartner202405CreateAffiliatePartnerCampaignResponse } from '../model/affiliatePartner/V202405/CreateAffiliatePartnerCampaignResponse';
import { AffiliatePartner202405EditAffiliatePartnerCampaignRequestBody } from '../model/affiliatePartner/V202405/EditAffiliatePartnerCampaignRequestBody';
import { AffiliatePartner202405EditAffiliatePartnerCampaignResponse } from '../model/affiliatePartner/V202405/EditAffiliatePartnerCampaignResponse';
import { AffiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkRequestBody } from '../model/affiliatePartner/V202405/GenerateAffiliatePartnerCampaignProductLinkRequestBody';
import { AffiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkResponse } from '../model/affiliatePartner/V202405/GenerateAffiliatePartnerCampaignProductLinkResponse';
import { AffiliatePartner202405GetAffiliatePartnerCampaignDetailResponse } from '../model/affiliatePartner/V202405/GetAffiliatePartnerCampaignDetailResponse';
import { AffiliatePartner202405GetAffiliatePartnerCampaignListResponse } from '../model/affiliatePartner/V202405/GetAffiliatePartnerCampaignListResponse';
import { AffiliatePartner202405GetAffiliatePartnerCampaignProductListResponse } from '../model/affiliatePartner/V202405/GetAffiliatePartnerCampaignProductListResponse';
import { AffiliatePartner202405PublishAffiliatePartnerCampaignResponse } from '../model/affiliatePartner/V202405/PublishAffiliatePartnerCampaignResponse';
import { AffiliatePartner202405ReviewAffiliatePartnerCampaignProductRequestBody } from '../model/affiliatePartner/V202405/ReviewAffiliatePartnerCampaignProductRequestBody';
import { AffiliatePartner202405ReviewAffiliatePartnerCampaignProductResponse } from '../model/affiliatePartner/V202405/ReviewAffiliatePartnerCampaignProductResponse';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://open-api.tiktokglobalshop.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AffiliatePartnerV202405ApiApiKeys {
}

export class AffiliatePartnerV202405Api {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    static readonly apiName = 'AffiliatePartnerV202405Api' as const;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: AffiliatePartnerV202405ApiApiKeys, value: string) {
        (this.authentications as any)[AffiliatePartnerV202405ApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * This API offers the ability to get affiliate campaign details.
     * @summary GetAffiliatePartnerCampaignDetail
     * @param campaignId The ID of the campaign.
     * @param categoryAssetCipher The partner identifier used in API requests. Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995). 
     * @param xTtsAccessToken 
     * @param contentType Allowed type: application/json
     */
    public async CampaignsCampaignIdGet (campaignId: string, categoryAssetCipher: string, xTtsAccessToken: string, contentType: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405GetAffiliatePartnerCampaignDetailResponse;  }> {
        const localVarPath = this.basePath + '/affiliate_partner/202405/campaigns/{campaign_id}'
            .replace('{' + 'campaign_id' + '}', encodeURIComponent(String(campaignId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling CampaignsCampaignIdGet.');
        }

        // verify required parameter 'categoryAssetCipher' is not null or undefined
        if (categoryAssetCipher === null || categoryAssetCipher === undefined) {
            throw new Error('Required parameter categoryAssetCipher was null or undefined when calling CampaignsCampaignIdGet.');
        }

        // verify required parameter 'xTtsAccessToken' is not null or undefined
        if (xTtsAccessToken === null || xTtsAccessToken === undefined) {
            throw new Error('Required parameter xTtsAccessToken was null or undefined when calling CampaignsCampaignIdGet.');
        }

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling CampaignsCampaignIdGet.');
        }

        if (categoryAssetCipher !== undefined) {
            localVarQueryParameters['category_asset_cipher'] = ObjectSerializer.serialize(categoryAssetCipher, "string");
        }

        localVarHeaderParams['x-tts-access-token'] = ObjectSerializer.serialize(xTtsAccessToken, "string");
        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405GetAffiliatePartnerCampaignDetailResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AffiliatePartner202405GetAffiliatePartnerCampaignDetailResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     *  This API offers the ability to edit an Affiliate Partner campaign. No editing after the campaign is closed.
     * @summary EditAffiliatePartnerCampaign
     * @param campaignId The ID of the campaign.
     * @param categoryAssetCipher The partner identifier used in API requests.  Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995). 
     * @param xTtsAccessToken 
     * @param contentType Allowed type: application/json
     * @param EditAffiliatePartnerCampaignRequestBody 
     */
    public async CampaignsCampaignIdPartialEditPost (campaignId: string, categoryAssetCipher: string, xTtsAccessToken: string, contentType: string, EditAffiliatePartnerCampaignRequestBody?: AffiliatePartner202405EditAffiliatePartnerCampaignRequestBody, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405EditAffiliatePartnerCampaignResponse;  }> {
        const localVarPath = this.basePath + '/affiliate_partner/202405/campaigns/{campaign_id}/partial_edit'
            .replace('{' + 'campaign_id' + '}', encodeURIComponent(String(campaignId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling CampaignsCampaignIdPartialEditPost.');
        }

        // verify required parameter 'categoryAssetCipher' is not null or undefined
        if (categoryAssetCipher === null || categoryAssetCipher === undefined) {
            throw new Error('Required parameter categoryAssetCipher was null or undefined when calling CampaignsCampaignIdPartialEditPost.');
        }

        // verify required parameter 'xTtsAccessToken' is not null or undefined
        if (xTtsAccessToken === null || xTtsAccessToken === undefined) {
            throw new Error('Required parameter xTtsAccessToken was null or undefined when calling CampaignsCampaignIdPartialEditPost.');
        }

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling CampaignsCampaignIdPartialEditPost.');
        }

        if (categoryAssetCipher !== undefined) {
            localVarQueryParameters['category_asset_cipher'] = ObjectSerializer.serialize(categoryAssetCipher, "string");
        }

        localVarHeaderParams['x-tts-access-token'] = ObjectSerializer.serialize(xTtsAccessToken, "string");
        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(EditAffiliatePartnerCampaignRequestBody, "AffiliatePartner202405EditAffiliatePartnerCampaignRequestBody")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405EditAffiliatePartnerCampaignResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AffiliatePartner202405EditAffiliatePartnerCampaignResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This API offers the ability to list products submitted by sellers in an Affiliate Partner campaign.
     * @summary GetAffiliatePartnerCampaignProductList
     * @param campaignId The ID of the campaign.
     * @param categoryAssetCipher The partner identifier used in API requests. Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995). 
     * @param pageSize The number of results to be returned per page.
     * @param xTtsAccessToken 
     * @param contentType Allowed type: application/json
     * @param pageToken An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page.
     * @param reviewStatus The product review status. This an enumerated type with values: - PENDING - APPROVED - REJECTED - PENDING_CLOSED - CLOSED
     * @param productName Filter the product list by product name. If value of &#x60;product_name&#x60; is contained in &#x60;product.name&#x60;, the product will be included in the response.
     * @param productId Filter the product list by product ID. If value of &#x60;product_id&#x60; matches &#x60;product.id&#x60;, the product will be included in the response.
     * @param shopName Filter the product list by shop name. If value of &#x60;shop_name&#x60; is contained in &#x60;product.shop_name&#x60;, the product will be included in the response.
     * @param categoryId Filter the product list by category ID. If value of &#x60;category_id&#x60; matches &#x60;product.category.id&#x60;, or the product falls into the leaf category of the specified category, the product will be included in the response.
     */
    public async CampaignsCampaignIdProductsGet (campaignId: string, categoryAssetCipher: string, pageSize: number, xTtsAccessToken: string, contentType: string, pageToken?: string, reviewStatus?: string, productName?: string, productId?: string, shopName?: string, categoryId?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405GetAffiliatePartnerCampaignProductListResponse;  }> {
        const localVarPath = this.basePath + '/affiliate_partner/202405/campaigns/{campaign_id}/products'
            .replace('{' + 'campaign_id' + '}', encodeURIComponent(String(campaignId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling CampaignsCampaignIdProductsGet.');
        }

        // verify required parameter 'categoryAssetCipher' is not null or undefined
        if (categoryAssetCipher === null || categoryAssetCipher === undefined) {
            throw new Error('Required parameter categoryAssetCipher was null or undefined when calling CampaignsCampaignIdProductsGet.');
        }

        // verify required parameter 'pageSize' is not null or undefined
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling CampaignsCampaignIdProductsGet.');
        }

        // verify required parameter 'xTtsAccessToken' is not null or undefined
        if (xTtsAccessToken === null || xTtsAccessToken === undefined) {
            throw new Error('Required parameter xTtsAccessToken was null or undefined when calling CampaignsCampaignIdProductsGet.');
        }

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling CampaignsCampaignIdProductsGet.');
        }

        if (categoryAssetCipher !== undefined) {
            localVarQueryParameters['category_asset_cipher'] = ObjectSerializer.serialize(categoryAssetCipher, "string");
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['page_size'] = ObjectSerializer.serialize(pageSize, "number");
        }

        if (pageToken !== undefined) {
            localVarQueryParameters['page_token'] = ObjectSerializer.serialize(pageToken, "string");
        }

        if (reviewStatus !== undefined) {
            localVarQueryParameters['review_status'] = ObjectSerializer.serialize(reviewStatus, "string");
        }

        if (productName !== undefined) {
            localVarQueryParameters['product_name'] = ObjectSerializer.serialize(productName, "string");
        }

        if (productId !== undefined) {
            localVarQueryParameters['product_id'] = ObjectSerializer.serialize(productId, "string");
        }

        if (shopName !== undefined) {
            localVarQueryParameters['shop_name'] = ObjectSerializer.serialize(shopName, "string");
        }

        if (categoryId !== undefined) {
            localVarQueryParameters['category_id'] = ObjectSerializer.serialize(categoryId, "string");
        }

        localVarHeaderParams['x-tts-access-token'] = ObjectSerializer.serialize(xTtsAccessToken, "string");
        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405GetAffiliatePartnerCampaignProductListResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AffiliatePartner202405GetAffiliatePartnerCampaignProductListResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This API offers the ability to generate campaign product promotion links.
     * @summary GenerateAffiliatePartnerCampaignProductLink
     * @param campaignId The ID of the campaign.
     * @param productId The ID of the product.
     * @param categoryAssetCipher The partner identifier used in API requests. Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995). 
     * @param xTtsAccessToken 
     * @param contentType Allowed type: application/json
     * @param GenerateAffiliatePartnerCampaignProductLinkRequestBody 
     */
    public async CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePost (campaignId: string, productId: string, categoryAssetCipher: string, xTtsAccessToken: string, contentType: string, GenerateAffiliatePartnerCampaignProductLinkRequestBody?: AffiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkRequestBody, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkResponse;  }> {
        const localVarPath = this.basePath + '/affiliate_partner/202405/campaigns/{campaign_id}/products/{product_id}/promotion_link/generate'
            .replace('{' + 'campaign_id' + '}', encodeURIComponent(String(campaignId)))
            .replace('{' + 'product_id' + '}', encodeURIComponent(String(productId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePost.');
        }

        // verify required parameter 'productId' is not null or undefined
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePost.');
        }

        // verify required parameter 'categoryAssetCipher' is not null or undefined
        if (categoryAssetCipher === null || categoryAssetCipher === undefined) {
            throw new Error('Required parameter categoryAssetCipher was null or undefined when calling CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePost.');
        }

        // verify required parameter 'xTtsAccessToken' is not null or undefined
        if (xTtsAccessToken === null || xTtsAccessToken === undefined) {
            throw new Error('Required parameter xTtsAccessToken was null or undefined when calling CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePost.');
        }

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePost.');
        }

        if (categoryAssetCipher !== undefined) {
            localVarQueryParameters['category_asset_cipher'] = ObjectSerializer.serialize(categoryAssetCipher, "string");
        }

        localVarHeaderParams['x-tts-access-token'] = ObjectSerializer.serialize(xTtsAccessToken, "string");
        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(GenerateAffiliatePartnerCampaignProductLinkRequestBody, "AffiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkRequestBody")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AffiliatePartner202405GenerateAffiliatePartnerCampaignProductLinkResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This API offers the ability for the TikTok Affiliate Partner to review the products submitted by the sellers. This API offers the ability for the TikTok Affiliate Partner to review the products submitted by the sellers.
     * @summary ReviewAffiliatePartnerCampaignProduct
     * @param campaignId The campaign identifier.
     * @param productId The product identifier.
     * @param categoryAssetCipher The partner identifier used in API requests. Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995). 
     * @param xTtsAccessToken 
     * @param contentType Allowed type: application/json
     * @param ReviewAffiliatePartnerCampaignProductRequestBody 
     */
    public async CampaignsCampaignIdProductsProductIdReviewPost (campaignId: string, productId: string, categoryAssetCipher: string, xTtsAccessToken: string, contentType: string, ReviewAffiliatePartnerCampaignProductRequestBody?: AffiliatePartner202405ReviewAffiliatePartnerCampaignProductRequestBody, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405ReviewAffiliatePartnerCampaignProductResponse;  }> {
        const localVarPath = this.basePath + '/affiliate_partner/202405/campaigns/{campaign_id}/products/{product_id}/review'
            .replace('{' + 'campaign_id' + '}', encodeURIComponent(String(campaignId)))
            .replace('{' + 'product_id' + '}', encodeURIComponent(String(productId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling CampaignsCampaignIdProductsProductIdReviewPost.');
        }

        // verify required parameter 'productId' is not null or undefined
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling CampaignsCampaignIdProductsProductIdReviewPost.');
        }

        // verify required parameter 'categoryAssetCipher' is not null or undefined
        if (categoryAssetCipher === null || categoryAssetCipher === undefined) {
            throw new Error('Required parameter categoryAssetCipher was null or undefined when calling CampaignsCampaignIdProductsProductIdReviewPost.');
        }

        // verify required parameter 'xTtsAccessToken' is not null or undefined
        if (xTtsAccessToken === null || xTtsAccessToken === undefined) {
            throw new Error('Required parameter xTtsAccessToken was null or undefined when calling CampaignsCampaignIdProductsProductIdReviewPost.');
        }

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling CampaignsCampaignIdProductsProductIdReviewPost.');
        }

        if (categoryAssetCipher !== undefined) {
            localVarQueryParameters['category_asset_cipher'] = ObjectSerializer.serialize(categoryAssetCipher, "string");
        }

        localVarHeaderParams['x-tts-access-token'] = ObjectSerializer.serialize(xTtsAccessToken, "string");
        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(ReviewAffiliatePartnerCampaignProductRequestBody, "AffiliatePartner202405ReviewAffiliatePartnerCampaignProductRequestBody")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405ReviewAffiliatePartnerCampaignProductResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AffiliatePartner202405ReviewAffiliatePartnerCampaignProductResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This API offers the ability to publish an Affiliate Partner campaign. The campaign will be displayed to sellers after publishing.
     * @summary PublishAffiliatePartnerCampaign
     * @param campaignId The campaign identifier.
     * @param categoryAssetCipher The partner identifier used in API requests. Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995). 
     * @param xTtsAccessToken 
     * @param contentType Allowed type: application/json
     */
    public async CampaignsCampaignIdPublishPost (campaignId: string, categoryAssetCipher: string, xTtsAccessToken: string, contentType: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405PublishAffiliatePartnerCampaignResponse;  }> {
        const localVarPath = this.basePath + '/affiliate_partner/202405/campaigns/{campaign_id}/publish'
            .replace('{' + 'campaign_id' + '}', encodeURIComponent(String(campaignId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling CampaignsCampaignIdPublishPost.');
        }

        // verify required parameter 'categoryAssetCipher' is not null or undefined
        if (categoryAssetCipher === null || categoryAssetCipher === undefined) {
            throw new Error('Required parameter categoryAssetCipher was null or undefined when calling CampaignsCampaignIdPublishPost.');
        }

        // verify required parameter 'xTtsAccessToken' is not null or undefined
        if (xTtsAccessToken === null || xTtsAccessToken === undefined) {
            throw new Error('Required parameter xTtsAccessToken was null or undefined when calling CampaignsCampaignIdPublishPost.');
        }

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling CampaignsCampaignIdPublishPost.');
        }

        if (categoryAssetCipher !== undefined) {
            localVarQueryParameters['category_asset_cipher'] = ObjectSerializer.serialize(categoryAssetCipher, "string");
        }

        localVarHeaderParams['x-tts-access-token'] = ObjectSerializer.serialize(xTtsAccessToken, "string");
        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405PublishAffiliatePartnerCampaignResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AffiliatePartner202405PublishAffiliatePartnerCampaignResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This API offers the ability to list campaigns created by the Affiliate Partner.
     * @summary GetAffiliatePartnerCampaignList
     * @param categoryAssetCipher The partner identifier used in API requests. Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995). 
     * @param pageSize The number of results to be returned per page. Default: 10. Valid range: [1-100]. 
     * @param xTtsAccessToken 
     * @param contentType Allowed type: application/json
     * @param pageToken An opaque token used to retrieve the next page of a paginated result set. Retrieve this value from the result of the &#x60;next_page_token&#x60; from a previous response. It is not needed for the first page. Maximum page size is &#x60;100&#x60; items.
     * @param status The campaign status. The status is an enumerated type with values: - READY - UPCOMING - ONGOING - CLOSED
     * @param type The campaign type. This is an enumerated type with values:  - MY_CAMPAIGNS - GS_SELLING_CAMPAIGNS  - SELLER_CAMPAIGNS - EXCLUSIVE_TIKTOK_SHOP   Default value is MY_CAMPAIGNS.
     * @param queryTypeFilter An extended filter to be used when the campaign type property type is set to SELLER_CAMPAIGNS or EXCLUSIVE_TIKTOK_SHOP.  If the type property is set to SELLER_CAMPAIGNS, the valid values for this property are:  - MARKETPLACE: the response includes campaigns that the partner did not join. - JOINED :  the response includes campaigns the partner has joined only. If the type property is set to EXCLUSIVE_TIKTOK_SHOP, the valid values for this property are: - AVAILABLE: the response includes campaigns the partner is permitted to join. - JOINED: the response includes campaigns the partner has joined only. Other types can either not pass a value or pass in Default.
     */
    public async CampaignsGet (categoryAssetCipher: string, pageSize: number, xTtsAccessToken: string, contentType: string, pageToken?: string, status?: string, type?: string, queryTypeFilter?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405GetAffiliatePartnerCampaignListResponse;  }> {
        const localVarPath = this.basePath + '/affiliate_partner/202405/campaigns';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'categoryAssetCipher' is not null or undefined
        if (categoryAssetCipher === null || categoryAssetCipher === undefined) {
            throw new Error('Required parameter categoryAssetCipher was null or undefined when calling CampaignsGet.');
        }

        // verify required parameter 'pageSize' is not null or undefined
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling CampaignsGet.');
        }

        // verify required parameter 'xTtsAccessToken' is not null or undefined
        if (xTtsAccessToken === null || xTtsAccessToken === undefined) {
            throw new Error('Required parameter xTtsAccessToken was null or undefined when calling CampaignsGet.');
        }

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling CampaignsGet.');
        }

        if (categoryAssetCipher !== undefined) {
            localVarQueryParameters['category_asset_cipher'] = ObjectSerializer.serialize(categoryAssetCipher, "string");
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['page_size'] = ObjectSerializer.serialize(pageSize, "number");
        }

        if (pageToken !== undefined) {
            localVarQueryParameters['page_token'] = ObjectSerializer.serialize(pageToken, "string");
        }

        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "string");
        }

        if (type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(type, "string");
        }

        if (queryTypeFilter !== undefined) {
            localVarQueryParameters['query_type_filter'] = ObjectSerializer.serialize(queryTypeFilter, "string");
        }

        localVarHeaderParams['x-tts-access-token'] = ObjectSerializer.serialize(xTtsAccessToken, "string");
        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405GetAffiliatePartnerCampaignListResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AffiliatePartner202405GetAffiliatePartnerCampaignListResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This API offers the ability to create a campaign for targeted sellers/public sellers, including campaign period, campaign registration period and commission requirements. Note: The campaign will not be displayed to sellers after creation
     * @summary CreateAffiliatePartnerCampaign
     * @param categoryAssetCipher The partner identifier used in API requests. Retrieve this value by using the [Get Authorized Category Assets API] (https://partner.tiktokshop.com/docv2/page/666012dd609d4402cc3be995).  
     * @param xTtsAccessToken 
     * @param contentType Allowed type: application/json
     * @param CreateAffiliatePartnerCampaignRequestBody 
     */
    public async CampaignsPost (categoryAssetCipher: string, xTtsAccessToken: string, contentType: string, CreateAffiliatePartnerCampaignRequestBody?: AffiliatePartner202405CreateAffiliatePartnerCampaignRequestBody, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405CreateAffiliatePartnerCampaignResponse;  }> {
        const localVarPath = this.basePath + '/affiliate_partner/202405/campaigns';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'categoryAssetCipher' is not null or undefined
        if (categoryAssetCipher === null || categoryAssetCipher === undefined) {
            throw new Error('Required parameter categoryAssetCipher was null or undefined when calling CampaignsPost.');
        }

        // verify required parameter 'xTtsAccessToken' is not null or undefined
        if (xTtsAccessToken === null || xTtsAccessToken === undefined) {
            throw new Error('Required parameter xTtsAccessToken was null or undefined when calling CampaignsPost.');
        }

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling CampaignsPost.');
        }

        if (categoryAssetCipher !== undefined) {
            localVarQueryParameters['category_asset_cipher'] = ObjectSerializer.serialize(categoryAssetCipher, "string");
        }

        localVarHeaderParams['x-tts-access-token'] = ObjectSerializer.serialize(xTtsAccessToken, "string");
        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(CreateAffiliatePartnerCampaignRequestBody, "AffiliatePartner202405CreateAffiliatePartnerCampaignRequestBody")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AffiliatePartner202405CreateAffiliatePartnerCampaignResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AffiliatePartner202405CreateAffiliatePartnerCampaignResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}

export const AffiliatePartnerV202405ApiOperationNames = {
    CampaignsCampaignIdGet: 'CampaignsCampaignIdGet',CampaignsCampaignIdPartialEditPost: 'CampaignsCampaignIdPartialEditPost',CampaignsCampaignIdProductsGet: 'CampaignsCampaignIdProductsGet',CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePost: 'CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePost',CampaignsCampaignIdProductsProductIdReviewPost: 'CampaignsCampaignIdProductsProductIdReviewPost',CampaignsCampaignIdPublishPost: 'CampaignsCampaignIdPublishPost',CampaignsGet: 'CampaignsGet',CampaignsPost: 'CampaignsPost',
} as const


export type AffiliatePartnerV202405ApiOperationTypes = {
    CampaignsCampaignIdGet: AffiliatePartnerV202405Api['CampaignsCampaignIdGet'];CampaignsCampaignIdPartialEditPost: AffiliatePartnerV202405Api['CampaignsCampaignIdPartialEditPost'];CampaignsCampaignIdProductsGet: AffiliatePartnerV202405Api['CampaignsCampaignIdProductsGet'];CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePost: AffiliatePartnerV202405Api['CampaignsCampaignIdProductsProductIdPromotionLinkGeneratePost'];CampaignsCampaignIdProductsProductIdReviewPost: AffiliatePartnerV202405Api['CampaignsCampaignIdProductsProductIdReviewPost'];CampaignsCampaignIdPublishPost: AffiliatePartnerV202405Api['CampaignsCampaignIdPublishPost'];CampaignsGet: AffiliatePartnerV202405Api['CampaignsGet'];CampaignsPost: AffiliatePartnerV202405Api['CampaignsPost'];
};

